import { Observable } from 'rxjs';
import { LoginProvider } from './entities/login-provider';
import { SocialUser } from './entities/social-user';
/**
 * An interface to define the shape of the service configuration options.
 */
import * as ɵngcc0 from '@angular/core';
export interface SocialAuthServiceConfig {
    autoLogin?: boolean;
    providers: {
        id: string;
        provider: LoginProvider;
    }[];
    onError?: (error: any) => any;
}
/**
 * The service encapsulating the social login functionality. Exposes methods like
 * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can
 * subscribe to get the current logged in user information.
 *
 * @dynamic
 */
export declare class SocialAuthService {
    private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND;
    private static readonly ERR_NOT_LOGGED_IN;
    private static readonly ERR_NOT_INITIALIZED;
    private static readonly ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN;
    private providers;
    private autoLogin;
    private _user;
    private _authState;
    private initialized;
    private _initState;
    /** An `Observable` that one can subscribe to get the current logged in user information */
    get authState(): Observable<SocialUser>;
    /** An `Observable` to communicate the readiness of the service and associated login providers */
    get initState(): Observable<boolean>;
    /**
     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object
     */
    constructor(config: SocialAuthServiceConfig | Promise<SocialAuthServiceConfig>);
    private initialize;
    refreshAuthToken(providerId: string): Promise<void>;
    /**
     * A method used to sign in a user with a specific `LoginProvider`.
     *
     * @param providerId Id with which the `LoginProvider` has been registered with the service
     * @param signInOptions Optional `LoginProvider` specific arguments
     * @returns A `Promise` that resolves to the authenticated user information
     */
    signIn(providerId: string, signInOptions?: any): Promise<SocialUser>;
    /**
     * A method used to sign out the currently loggen in user.
     *
     * @param revoke Optional parameter to specify whether a hard sign out is to be performed
     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise
     */
    signOut(revoke?: boolean): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SocialAuthService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SocialAuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFsYXV0aC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInNvY2lhbGF1dGguc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbURBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTG9naW5Qcm92aWRlciB9IGZyb20gJy4vZW50aXRpZXMvbG9naW4tcHJvdmlkZXInO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4vZW50aXRpZXMvc29jaWFsLXVzZXInO1xuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdG8gZGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgc2VydmljZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU29jaWFsQXV0aFNlcnZpY2VDb25maWcge1xuICAgIGF1dG9Mb2dpbj86IGJvb2xlYW47XG4gICAgcHJvdmlkZXJzOiB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIHByb3ZpZGVyOiBMb2dpblByb3ZpZGVyO1xuICAgIH1bXTtcbiAgICBvbkVycm9yPzogKGVycm9yOiBhbnkpID0+IGFueTtcbn1cbi8qKlxuICogVGhlIHNlcnZpY2UgZW5jYXBzdWxhdGluZyB0aGUgc29jaWFsIGxvZ2luIGZ1bmN0aW9uYWxpdHkuIEV4cG9zZXMgbWV0aG9kcyBsaWtlXG4gKiBgc2lnbkluYCwgYHNpZ25PdXRgLiBBbHNvLCBleHBvc2VzIGFuIGBhdXRoU3RhdGVgIGBPYnNlcnZhYmxlYCB0aGF0IG9uZSBjYW5cbiAqIHN1YnNjcmliZSB0byBnZXQgdGhlIGN1cnJlbnQgbG9nZ2VkIGluIHVzZXIgaW5mb3JtYXRpb24uXG4gKlxuICogQGR5bmFtaWNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU29jaWFsQXV0aFNlcnZpY2Uge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVSUl9MT0dJTl9QUk9WSURFUl9OT1RfRk9VTkQ7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVJSX05PVF9MT0dHRURfSU47XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVJSX05PVF9JTklUSUFMSVpFRDtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFUlJfTk9UX1NVUFBPUlRFRF9GT1JfUkVGUkVTSF9UT0tFTjtcbiAgICBwcml2YXRlIHByb3ZpZGVycztcbiAgICBwcml2YXRlIGF1dG9Mb2dpbjtcbiAgICBwcml2YXRlIF91c2VyO1xuICAgIHByaXZhdGUgX2F1dGhTdGF0ZTtcbiAgICBwcml2YXRlIGluaXRpYWxpemVkO1xuICAgIHByaXZhdGUgX2luaXRTdGF0ZTtcbiAgICAvKiogQW4gYE9ic2VydmFibGVgIHRoYXQgb25lIGNhbiBzdWJzY3JpYmUgdG8gZ2V0IHRoZSBjdXJyZW50IGxvZ2dlZCBpbiB1c2VyIGluZm9ybWF0aW9uICovXG4gICAgZ2V0IGF1dGhTdGF0ZSgpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+O1xuICAgIC8qKiBBbiBgT2JzZXJ2YWJsZWAgdG8gY29tbXVuaWNhdGUgdGhlIHJlYWRpbmVzcyBvZiB0aGUgc2VydmljZSBhbmQgYXNzb2NpYXRlZCBsb2dpbiBwcm92aWRlcnMgKi9cbiAgICBnZXQgaW5pdFN0YXRlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbmZpZyBBIGBTb2NpYWxBdXRoU2VydmljZUNvbmZpZ2Agb2JqZWN0IG9yIGEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgdG8gYSBgU29jaWFsQXV0aFNlcnZpY2VDb25maWdgIG9iamVjdFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogU29jaWFsQXV0aFNlcnZpY2VDb25maWcgfCBQcm9taXNlPFNvY2lhbEF1dGhTZXJ2aWNlQ29uZmlnPik7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplO1xuICAgIHJlZnJlc2hBdXRoVG9rZW4ocHJvdmlkZXJJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBBIG1ldGhvZCB1c2VkIHRvIHNpZ24gaW4gYSB1c2VyIHdpdGggYSBzcGVjaWZpYyBgTG9naW5Qcm92aWRlcmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvdmlkZXJJZCBJZCB3aXRoIHdoaWNoIHRoZSBgTG9naW5Qcm92aWRlcmAgaGFzIGJlZW4gcmVnaXN0ZXJlZCB3aXRoIHRoZSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHNpZ25Jbk9wdGlvbnMgT3B0aW9uYWwgYExvZ2luUHJvdmlkZXJgIHNwZWNpZmljIGFyZ3VtZW50c1xuICAgICAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBpbmZvcm1hdGlvblxuICAgICAqL1xuICAgIHNpZ25Jbihwcm92aWRlcklkOiBzdHJpbmcsIHNpZ25Jbk9wdGlvbnM/OiBhbnkpOiBQcm9taXNlPFNvY2lhbFVzZXI+O1xuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHVzZWQgdG8gc2lnbiBvdXQgdGhlIGN1cnJlbnRseSBsb2dnZW4gaW4gdXNlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXZva2UgT3B0aW9uYWwgcGFyYW1ldGVyIHRvIHNwZWNpZnkgd2hldGhlciBhIGhhcmQgc2lnbiBvdXQgaXMgdG8gYmUgcGVyZm9ybWVkXG4gICAgICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyBpZiB0aGUgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWwsIHJlamVjdHMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgc2lnbk91dChyZXZva2U/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbn1cbiJdfQ==