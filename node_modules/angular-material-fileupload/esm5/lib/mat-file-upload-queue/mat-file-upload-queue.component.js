/**
 * @fileoverview added by tsickle
 * Generated from: lib/mat-file-upload-queue/mat-file-upload-queue.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ChangeDetectionStrategy, ContentChildren, forwardRef, QueryList, Input, ChangeDetectorRef, } from "@angular/core";
import { merge } from "rxjs";
import { HttpHeaders, HttpParams } from "@angular/common/http";
import { startWith } from "rxjs/operators";
import { MatFileUploadQueueService } from "./mat-file-upload-queue.service";
import { MatFileUploadComponent } from "../mat-file-upload/mat-file-upload.component";
var MatFileUploadQueueComponent = /** @class */ (function () {
    function MatFileUploadQueueComponent(matFileUploadQueueService, changeDetectorRef) {
        this.matFileUploadQueueService = matFileUploadQueueService;
        this.changeDetectorRef = changeDetectorRef;
        this.files = [];
        this.httpRequestHeaders = new HttpHeaders();
        this.httpRequestParams = new HttpParams();
        this.fileAlias = "file";
        this.uploadAllColor = "primary";
        this.uploadAllLabel = "Upload All";
        this.removeAllColor = "primary";
        this.removeAllLabel = "Remove All";
    }
    Object.defineProperty(MatFileUploadQueueComponent.prototype, "fileUploadRemoveEvents", {
        /** Combined stream of all of the file upload remove change events. */
        get: /**
         * Combined stream of all of the file upload remove change events.
         * @return {?}
         */
        function () {
            return merge.apply(void 0, tslib_1.__spread(this.fileUploads.map((/**
             * @param {?} fileUpload
             * @return {?}
             */
            function (fileUpload) { return fileUpload.removeEvent; }))));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.matFileUploadQueueService.initialize({
            httpUrl: changes["httpUrl"] ? changes["httpUrl"].currentValue : undefined,
            httpRequestHeaders: changes["httpRequestHeaders"]
                ? changes["httpRequestHeaders"].currentValue
                : undefined,
            httpRequestParams: changes["httpRequestParams"]
                ? changes["httpRequestParams"].currentValue
                : undefined,
            fileAlias: changes["fileAlias"]
                ? changes["fileAlias"].currentValue
                : undefined,
        });
    };
    /**
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // When the list changes, re-subscribe
        this._changeSubscription = this.fileUploads.changes
            .pipe(startWith(null))
            .subscribe((/**
         * @return {?}
         */
        function () {
            if (_this._fileRemoveSubscription) {
                _this._fileRemoveSubscription.unsubscribe();
            }
            _this._listenTofileRemoved();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype._listenTofileRemoved = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._fileRemoveSubscription = this.fileUploadRemoveEvents.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.files.splice(event.id, 1);
            _this.changeDetectorRef.markForCheck();
        }));
    };
    /**
     * @param {?} file
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype.add = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.files.push(file);
        this.changeDetectorRef.markForCheck();
    };
    /**
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype.uploadAll = /**
     * @return {?}
     */
    function () {
        this.fileUploads.forEach((/**
         * @param {?} fileUpload
         * @return {?}
         */
        function (fileUpload) {
            fileUpload.upload();
        }));
    };
    /**
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype.removeAll = /**
     * @return {?}
     */
    function () {
        this.files.splice(0, this.files.length);
        this.changeDetectorRef.markForCheck();
    };
    /**
     * @return {?}
     */
    MatFileUploadQueueComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._changeSubscription)
            this._changeSubscription.unsubscribe();
        if (this._fileRemoveSubscription)
            this._fileRemoveSubscription.unsubscribe();
        if (this.files) {
            this.removeAll();
        }
    };
    MatFileUploadQueueComponent.decorators = [
        { type: Component, args: [{
                    selector: "mat-file-upload-queue",
                    template: "<ng-content></ng-content>\n<br />\n<button\n  mat-raised-button\n  [color]=\"uploadAllColor\"\n  *ngIf=\"files.length > 0\"\n  (click)=\"uploadAll()\"\n>\n  {{ uploadAllLabel }}\n</button>\n<button\n  mat-raised-button\n  [color]=\"removeAllColor\"\n  *ngIf=\"files.length > 0\"\n  (click)=\"removeAll()\"\n>\n  {{ removeAllLabel }}\n</button>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MatFileUploadQueueService],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatFileUploadQueueComponent.ctorParameters = function () { return [
        { type: MatFileUploadQueueService },
        { type: ChangeDetectorRef }
    ]; };
    MatFileUploadQueueComponent.propDecorators = {
        fileUploads: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return MatFileUploadComponent; })),] }],
        httpUrl: [{ type: Input }],
        httpRequestHeaders: [{ type: Input }],
        httpRequestParams: [{ type: Input }],
        fileAlias: [{ type: Input }],
        uploadAllColor: [{ type: Input }],
        uploadAllLabel: [{ type: Input }],
        removeAllColor: [{ type: Input }],
        removeAllLabel: [{ type: Input }]
    };
    return MatFileUploadQueueComponent;
}());
export { MatFileUploadQueueComponent };
if (false) {
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.fileUploads;
    /**
     * Subscription to remove changes in files.
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype._fileRemoveSubscription;
    /**
     * Subscription to changes in the files.
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype._changeSubscription;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.files;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.httpUrl;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.httpRequestHeaders;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.httpRequestParams;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.fileAlias;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.uploadAllColor;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.uploadAllLabel;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.removeAllColor;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.removeAllLabel;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype.matFileUploadQueueService;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,