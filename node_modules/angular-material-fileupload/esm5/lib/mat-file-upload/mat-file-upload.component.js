/**
 * @fileoverview added by tsickle
 * Generated from: lib/mat-file-upload/mat-file-upload.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, } from "@angular/core";
import { ReplaySubject, BehaviorSubject, Subscription } from "rxjs";
import { HttpClient, HttpEventType, } from "@angular/common/http";
import { MatFileUploadQueueService } from "../mat-file-upload-queue/mat-file-upload-queue.service";
var MatFileUploadComponent = /** @class */ (function () {
    function MatFileUploadComponent(HttpClient, matFileUploadQueueService) {
        this.HttpClient = HttpClient;
        this.matFileUploadQueueService = matFileUploadQueueService;
        this.uploadProgressSubject = new ReplaySubject();
        this.uploadProgress$ = this.uploadProgressSubject.asObservable();
        this.uploadInProgressSubject = new BehaviorSubject(false);
        this.uploadInProgress$ = this.uploadInProgressSubject.asObservable();
        this.subs = new Subscription();
        this.fileUploadAriaLabel = "File Upload";
        this.cancelAriaLabel = "Cancel File Upload";
        /**
         * Output
         */
        this.removeEvent = new EventEmitter();
        this.onUpload = new EventEmitter();
        /** @type {?} */
        var queueInput = this.matFileUploadQueueService.getInputValue();
        if (queueInput) {
            this.httpUrl = this.httpUrl || queueInput.httpUrl;
            this.httpRequestHeaders =
                this.httpRequestHeaders || queueInput.httpRequestHeaders;
            this.httpRequestParams =
                this.httpRequestParams || queueInput.httpRequestParams;
            this.fileAlias = this.fileAlias || queueInput.fileAlias;
        }
    }
    Object.defineProperty(MatFileUploadComponent.prototype, "file", {
        get: /**
         * @return {?}
         */
        function () {
            return this._file;
        },
        set: /**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            this._file = file;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUploadComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this._id = id;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.uploadProgressSubject.next({
            progressPercentage: 0,
            loaded: 0,
            total: this._file.size,
        });
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.upload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.uploadInProgressSubject.next(true);
        // How to set the alias?
        /** @type {?} */
        var formData = new FormData();
        formData.set(this.fileAlias, this._file, this._file.name);
        this.subs.add(this.HttpClient.post(this.httpUrl, formData, {
            headers: this.httpRequestHeaders,
            observe: "events",
            params: this.httpRequestParams,
            reportProgress: true,
            responseType: "json",
        }).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                _this.uploadProgressSubject.next({
                    progressPercentage: Math.floor((event.loaded * 100) / event.total),
                    loaded: event.loaded,
                    total: event.total,
                });
            }
            _this.onUpload.emit({ file: _this._file, event: event });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            if (_this.fileUploadSubscription) {
                _this.fileUploadSubscription.unsubscribe();
            }
            _this.uploadInProgressSubject.next(false);
            _this.onUpload.emit({ file: _this._file, event: event });
        }), (/**
         * @return {?}
         */
        function () { return _this.uploadInProgressSubject.next(false); })));
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        this.subs.unsubscribe();
        this.removeEvent.emit(this);
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subs.unsubscribe();
    };
    MatFileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: "mat-file-upload",
                    template: "<ng-container *ngIf=\"uploadProgress$ | async as uploadProgress\">\n  <mat-card>\n    <span class=\"file-summary\">{{ file.name }}({{ file.size | bytes }})</span>\n    <div class=\"upload-progress\">\n      <mat-progress-bar\n        [value]=\"uploadProgress.progressPercentage\"\n      ></mat-progress-bar>\n\n      <button\n        mat-icon-button\n        [attr.aria-label]=\"fileUploadAriaLabel\"\n        (click)=\"upload()\"\n        [disabled]=\"uploadInProgress$ | async\"\n      >\n        <mat-icon>file_upload</mat-icon>\n      </button>\n\n      <button\n        mat-icon-button\n        [attr.aria-label]=\"cancelAriaLabel\"\n        (click)=\"remove()\"\n      >\n        <mat-icon>cancel</mat-icon>\n      </button>\n    </div>\n    <span class=\"file-summary\">{{ uploadProgress.progressPercentage }}%</span>\n    <span>\n      {{ uploadProgress.loaded | bytes }} of\n      {{ uploadProgress.total | bytes }}</span\n    >\n  </mat-card>\n</ng-container>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".file-summary{font-size:.85rem}.upload-progress{display:flex;align-content:center;align-items:center;height:10px}.upload-progress ::ng-deep .mat-progress-bar .mat-progress-bar-element{transition:none}"]
                }] }
    ];
    /** @nocollapse */
    MatFileUploadComponent.ctorParameters = function () { return [
        { type: HttpClient },
        { type: MatFileUploadQueueService }
    ]; };
    MatFileUploadComponent.propDecorators = {
        httpUrl: [{ type: Input }],
        httpRequestHeaders: [{ type: Input }],
        httpRequestParams: [{ type: Input }],
        fileAlias: [{ type: Input }],
        file: [{ type: Input }],
        id: [{ type: Input }],
        fileUploadAriaLabel: [{ type: Input }],
        cancelAriaLabel: [{ type: Input }],
        removeEvent: [{ type: Output }],
        onUpload: [{ type: Output }]
    };
    return MatFileUploadComponent;
}());
export { MatFileUploadComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype.uploadProgressSubject;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadProgress$;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype.uploadInProgressSubject;
    /** @type {?} */
    MatFileUploadComponent.prototype.uploadInProgress$;
    /** @type {?} */
    MatFileUploadComponent.prototype.subs;
    /** @type {?} */
    MatFileUploadComponent.prototype.httpUrl;
    /** @type {?} */
    MatFileUploadComponent.prototype.httpRequestHeaders;
    /** @type {?} */
    MatFileUploadComponent.prototype.httpRequestParams;
    /** @type {?} */
    MatFileUploadComponent.prototype.fileAlias;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype._file;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype._id;
    /** @type {?} */
    MatFileUploadComponent.prototype.fileUploadAriaLabel;
    /** @type {?} */
    MatFileUploadComponent.prototype.cancelAriaLabel;
    /**
     * Output
     * @type {?}
     */
    MatFileUploadComponent.prototype.removeEvent;
    /** @type {?} */
    MatFileUploadComponent.prototype.onUpload;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype.fileUploadSubscription;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype.HttpClient;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadComponent.prototype.matFileUploadQueueService;
}
//# sourceMappingURL=data:application/json;base64,