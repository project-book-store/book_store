/**
 * @fileoverview added by tsickle
 * Generated from: lib/mat-file-upload-queue/mat-file-upload-queue.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ContentChildren, forwardRef, QueryList, Input, ChangeDetectorRef, } from "@angular/core";
import { merge } from "rxjs";
import { HttpHeaders, HttpParams } from "@angular/common/http";
import { startWith } from "rxjs/operators";
import { MatFileUploadQueueService } from "./mat-file-upload-queue.service";
import { MatFileUploadComponent } from "../mat-file-upload/mat-file-upload.component";
export class MatFileUploadQueueComponent {
    /**
     * @param {?} matFileUploadQueueService
     * @param {?} changeDetectorRef
     */
    constructor(matFileUploadQueueService, changeDetectorRef) {
        this.matFileUploadQueueService = matFileUploadQueueService;
        this.changeDetectorRef = changeDetectorRef;
        this.files = [];
        this.httpRequestHeaders = new HttpHeaders();
        this.httpRequestParams = new HttpParams();
        this.fileAlias = "file";
        this.uploadAllColor = "primary";
        this.uploadAllLabel = "Upload All";
        this.removeAllColor = "primary";
        this.removeAllLabel = "Remove All";
    }
    /**
     * Combined stream of all of the file upload remove change events.
     * @return {?}
     */
    get fileUploadRemoveEvents() {
        return merge(...this.fileUploads.map((/**
         * @param {?} fileUpload
         * @return {?}
         */
        (fileUpload) => fileUpload.removeEvent)));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.matFileUploadQueueService.initialize({
            httpUrl: changes["httpUrl"] ? changes["httpUrl"].currentValue : undefined,
            httpRequestHeaders: changes["httpRequestHeaders"]
                ? changes["httpRequestHeaders"].currentValue
                : undefined,
            httpRequestParams: changes["httpRequestParams"]
                ? changes["httpRequestParams"].currentValue
                : undefined,
            fileAlias: changes["fileAlias"]
                ? changes["fileAlias"].currentValue
                : undefined,
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // When the list changes, re-subscribe
        this._changeSubscription = this.fileUploads.changes
            .pipe(startWith(null))
            .subscribe((/**
         * @return {?}
         */
        () => {
            if (this._fileRemoveSubscription) {
                this._fileRemoveSubscription.unsubscribe();
            }
            this._listenTofileRemoved();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _listenTofileRemoved() {
        this._fileRemoveSubscription = this.fileUploadRemoveEvents.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.files.splice(event.id, 1);
            this.changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @param {?} file
     * @return {?}
     */
    add(file) {
        this.files.push(file);
        this.changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    uploadAll() {
        this.fileUploads.forEach((/**
         * @param {?} fileUpload
         * @return {?}
         */
        (fileUpload) => {
            fileUpload.upload();
        }));
    }
    /**
     * @return {?}
     */
    removeAll() {
        this.files.splice(0, this.files.length);
        this.changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._changeSubscription)
            this._changeSubscription.unsubscribe();
        if (this._fileRemoveSubscription)
            this._fileRemoveSubscription.unsubscribe();
        if (this.files) {
            this.removeAll();
        }
    }
}
MatFileUploadQueueComponent.decorators = [
    { type: Component, args: [{
                selector: "mat-file-upload-queue",
                template: "<ng-content></ng-content>\n<br />\n<button\n  mat-raised-button\n  [color]=\"uploadAllColor\"\n  *ngIf=\"files.length > 0\"\n  (click)=\"uploadAll()\"\n>\n  {{ uploadAllLabel }}\n</button>\n<button\n  mat-raised-button\n  [color]=\"removeAllColor\"\n  *ngIf=\"files.length > 0\"\n  (click)=\"removeAll()\"\n>\n  {{ removeAllLabel }}\n</button>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [MatFileUploadQueueService],
                styles: [""]
            }] }
];
/** @nocollapse */
MatFileUploadQueueComponent.ctorParameters = () => [
    { type: MatFileUploadQueueService },
    { type: ChangeDetectorRef }
];
MatFileUploadQueueComponent.propDecorators = {
    fileUploads: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => MatFileUploadComponent)),] }],
    httpUrl: [{ type: Input }],
    httpRequestHeaders: [{ type: Input }],
    httpRequestParams: [{ type: Input }],
    fileAlias: [{ type: Input }],
    uploadAllColor: [{ type: Input }],
    uploadAllLabel: [{ type: Input }],
    removeAllColor: [{ type: Input }],
    removeAllLabel: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.fileUploads;
    /**
     * Subscription to remove changes in files.
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype._fileRemoveSubscription;
    /**
     * Subscription to changes in the files.
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype._changeSubscription;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.files;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.httpUrl;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.httpRequestHeaders;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.httpRequestParams;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.fileAlias;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.uploadAllColor;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.uploadAllLabel;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.removeAllColor;
    /** @type {?} */
    MatFileUploadQueueComponent.prototype.removeAllLabel;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype.matFileUploadQueueService;
    /**
     * @type {?}
     * @private
     */
    MatFileUploadQueueComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,